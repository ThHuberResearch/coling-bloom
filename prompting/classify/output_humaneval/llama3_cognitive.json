[["Apply\n\nExplanation: This problem requires the student to use information (in this case, programming concepts and algorithms) to write a function that solves a specific problem. The problem provides a clear specification of the function's behavior, and the student must apply their knowledge of programming to implement the function correctly. This is a classic example of the \"Apply\" category, as the student is using their knowledge to solve a practical problem.", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply: Use information in new situations.\n\nReasoning:\nThis problem requires the application of programming concepts (such as function definition, data types, and arithmetic operations) to implement a specific task (extracting the decimal part of a floating-point number). The problem provides a clear specification and unit test, and the student is expected to write code that solves the problem, demonstrating their ability to apply their knowledge in a new situation.", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply: Use information in new situations.\n\nReasoning:\nThis task requires the student to apply their knowledge of programming concepts (e.g., functions, lists, conditional statements) to write a specific code that solves a given problem. The problem is a new situation, and the student needs to execute or implement the solution using their programming skills.", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply \n\nReasoning: This task requires the implementation of a given concept (mean absolute deviation) in a new situation (writing code in Python). The student needs to execute the algorithm to calculate the mean absolute deviation, which is an application of the concept.", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply\n\nReasoning:\nThe task requires the student to use their knowledge of programming concepts and apply it to a new situation. They are given a specific problem to solve (inserting a delimiter between every two consecutive elements of a list) and are expected to write code to implement this function. This involves executing, implementing, and using programming concepts to solve the problem, which falls under the \"Apply\" category of Bloom's taxonomy.", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply\n\nJustification:\nThis task requires the student to write code to solve a specific problem, which involves executing or implementing an algorithm to parse the input string and count the maximum level of nesting for each group of parentheses. This task falls under the \"Apply\" category of Bloom's taxonomy, as it requires the student to use their knowledge of programming concepts to solve a practical problem.", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply\n\nExplanation:\nThe task requires the student to use their knowledge of programming concepts and apply them to a specific problem, which is to write a function that filters a list of strings based on a given substring. This task involves executing, implementing, or using information in a new situation, which aligns with the \"Apply\" category in Bloom's taxonomy.", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply\n\nReasoning:\nThe task involves using information (in this case, programming concepts and the problem description) in a new situation (writing a function to solve a specific problem). The task requires the application of programming knowledge and skills to implement a solution, which aligns with the \"Apply\" category of Bloom's Taxonomy.", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["This problem falls under the \"Create\" category of Bloom's taxonomy.\n\nReasoning:\nThe problem requires the student to produce original code to implement two functions: `is_palindrome` and `make_palindrome`. The task involves designing and developing a solution from scratch, which aligns with the \"Create\" category. The student needs to formulate an algorithm, construct the code, and assemble the functions to meet the specified requirements. This requires generating new or original work, which is a hallmark of the \"Create\" category.", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["The problem falls under the \"Apply\" category of Bloom's taxonomy.\n\nReasoning:\nThe problem requires the student to use the concept of binary XOR operation and apply it to a specific programming task. The student needs to implement the function `string_xor` to perform the XOR operation on the input strings and return the result as a string. This involves executing or implementing a known concept in a new situation, which is a characteristic of the \"Apply\" category.", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply\n\nReasoning:\nThe problem requires the student to write code for a specific function, using the given specifications and examples. This task involves using the information provided (language syntax, function definition, and examples) to create a solution in a new situation (writing the code for the function). This falls under the \"Apply\" category of Bloom's taxonomy, as the student is applying their knowledge of programming concepts to solve a specific problem.", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply\n\nExplanation:\nThis task requires the student to write code to implement a specific function (greatest common divisor) in a programming language. This involves using previously learned concepts and techniques to solve a problem, which falls under the \"Apply\" category of Bloom's taxonomy. The student is not simply recalling a fact or concept, but rather using their knowledge to produce a working solution.", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply \n\nReasoning:\nThe problem requires the student to write code to implement a specific function, which involves applying the knowledge of programming concepts and techniques to a new situation. The student needs to execute, implement, or use their understanding of programming languages to solve the problem, which falls under the \"Apply\" category of Bloom's taxonomy.", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply\n\nReasoning:\nThe problem requires the student to use the given information (function definition and unit tests) to create a code that implements the described functionality. This involves applying the knowledge of programming concepts and language syntax to a specific situation, which falls under the \"Apply\" category of Bloom's taxonomy.", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply\n\nReasoning: The task is asking to write a code for a specific function, which involves using programming concepts and syntax to solve a problem. This requires the application of knowledge and skills in a new situation, which falls under the \"Apply\" category of Bloom's taxonomy.", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply\n\nReasoning:\nThe problem requires the student to write a code to parse the input string and return a list of integers corresponding to the number of beats each note lasts. This task requires the application of programming concepts and syntax to a specific problem, which is a characteristic of the \"Apply\" category in Bloom's taxonomy.", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"], ["Apply", "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\nYour task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate<|eot_id|><|start_header_id|>user<|end_header_id|>\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\nClassification:\n"]]