[["The task \"Write code for the following function\" falls into the **Apply** category of Bloom's taxonomy. \n\n### Classification: Apply\nThis is because writing code involves using information and concepts in new and practical situations. Here, the individual must apply their knowledge of programming, understand the requirements, and implement a solution that meets the specified criteria.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\nClassification:\n"], ["The task \"Write code for the following function\" fits into the \"Create\" category of Bloom's taxonomy.\n\n**Explanation:**\n- The task involves producing new or original work by writing code to solve a specific problem.\n- It requires developing a function that separates groups of nested parentheses into separate strings.\n- The task description indicates the need to formulate a new solution and author the code to implement it, which aligns with the \"Create\" category.\n\n**Classification: Create**", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\nClassification:\n"], ["The task \"Write code for the following function\" falls under the \"Create\" category in Bloom's taxonomy because it requires producing new or original work\u2014in this case, developing a function that performs a specific operation. This involves constructing code, which is an act of creation.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\nClassification:\n"], ["The task \"Write code for the following function\" falls under the category \"Apply\" in Bloom's taxonomy. This classification is based on the requirement to use programming skills and knowledge to implement code that meets the described functionality.\n\n**Apply:** Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\nClassification:\n"], ["The task \"Write code for the following function\" falls under the \"Create\" category of Bloom's taxonomy.\n\n**Create**: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\n\nCreating a function to calculate the Mean Absolute Deviation involves developing new code, which is aligned with the creative aspects of producing new work or constructing solutions.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\nClassification:\n"], ["The task \"Write code for the following function\" falls under the \"Create\" category of Bloom's taxonomy. \n\n**Create**: Produce new or original work. This task requires generating a new piece of code, which is a form of original production.\n\n**Examples of 'Create'**:\n- design\n- assemble\n- construct\n- conjecture\n- develop\n- formulate\n- author\n- investigate", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\nClassification:\n"], ["This problem primarily involves the \"Create\" category of Bloom's taxonomy. The task is to produce a new or original work by writing code to solve a specific problem, which involves designing and implementing a function to parse and analyze nested parentheses.\n\n**Classification: Create**\n\nTasks classified under \"Create\" involve producing new or original work, which in this case is the creation of a new function with specified behavior and logic.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\nClassification:\n"], ["The task \"Write code for the following function\" falls under the \"Create\" category of Bloom's taxonomy.\n\n**Create**: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\n\nIn this case, the task involves creating a function, which is an example of developing a piece of code, thus it aligns with the \"Create\" category.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\nClassification:\n"], ["The task \"Write code for the following function\" falls under Bloom's taxonomy category of \"Create\".\n\nClassification: **Create**\n\nReason: The task requires producing new or original work (writing a function), which involves developing and constructing a solution based on the provided specifications.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\nClassification:\n"], ["The task \"Write code for the following function\" falls into the \"Apply\" category of Bloom's taxonomy.\n\n**Classification: Apply**\n\nThis classification is based on the requirement to use learned information about programming concepts and Python syntax to create and implement a function that solves a given problem. It involves using knowledge in a new situation, which is characteristic of the \"Apply\" domain as described.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\nClassification:\n"], ["The task provided involves developing two functions: `is_palindrome` and `make_palindrome`, where the user is expected to write code to achieve specific desired functionality. \n\nLet's break it down:\n\n1. **`is_palindrome` function**: \n   - The main operation here is to check if a given string reads the same backward as forward.\n   \n2. **`make_palindrome` function**: \n   - The goal here is more complex. You need to find the shortest palindrome by appending the appropriate characters to the original string.\n   - The explanation indicates a need to implement an algorithm to achieve this purpose.\n\nConsidering these aspects, this task fits into the following category of Bloom's taxonomy:\n\n**Apply: Use information in new situations.**\n- Examples: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nClassification: **Apply**\n\nBoth functions require the practical application of knowledge about palindromes by writing executable code to solve the problem, hence they are classified under \"Apply.\"", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\nClassification:\n"], ["The task \"Write code for the following function\" falls under the \"Create\" category of Bloom's taxonomy. This is because it requires producing new or original work\u2014in this case, writing a function to achieve the described functionality. Specifically, it involves designing and developing code to perform binary XOR on two input strings.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\nClassification:\n"], ["The task \"Write code for the following function\" falls into the category of **Apply** in Bloom's taxonomy.\n\n**Apply**: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nThe given problem requires the use of information and coding skills to implement a function that performs a specific task, which aligns with the description and examples of the \"Apply\" category.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\nClassification:\n"], ["The task of writing code for the function `greatest_common_divisor` falls into the \"Apply\" category of Bloom's taxonomy. This task requires using knowledge and concepts in a new situation to solve a problem.\n\nClassification: **Apply**\n", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\nClassification:\n"], ["The task \"Write code for the following function to return a list of all prefixes from shortest to longest of the input string\" falls under the \"Create\" category of Bloom's taxonomy. \n\n**Create:** This category involves producing new or original work, which in this case includes authoring or developing a piece of code to achieve a specified functionality. The task requires generating a function that was not previously provided and represents an intellectual creation.\n\nSo, the classification is:\n\n**Classification: Create**", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\nClassification:\n"], ["The task \"Write code for the following function:\" involves generating new work, specifically authoring a function to meet a specified requirement. According to Bloom's taxonomy, this task falls under the category:\n\n**Create**: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\n\nClassification: Create", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\nClassification:\n"], ["The task \"Write code for the following function:\"\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\nClassification: **Create**", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\nClassification:\n"], ["The task \"Write code for the following function\" falls under the **Create** category of Bloom's taxonomy. This is because the task involves producing new or original work by developing a function that parses a musical string and returns a corresponding list of integers. \n\nHere are the details of this classification:\n\n- **Create**: This category encompasses tasks that require generating new ideas, products, or ways of viewing things. Writing code to solve a specific problem involves designing, authoring, and implementing a unique solution, which fits the description of producing new or original work.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\nClassification:\n"], ["The task given, \"Write code for the following function,\" requires using information and applying that to create a solution in the form of a piece of code. Thus, this task falls into the \"Apply\" category of Bloom's taxonomy. \n\nClassification: Apply", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\nClassification:\n"], ["The task \"Write code for the following function\" falls under the category of **Create** in Bloom's taxonomy. This is because it involves producing new and original work in the form of writing a function to solve a specific problem.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\nClassification:\n"]]