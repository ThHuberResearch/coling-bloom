[["The given problem can be classified under the \"Apply\" category of Bloom's taxonomy.\n\nThe \"Apply\" category involves using information in new situations, such as executing, implementing, solving, demonstrating, or interpreting a concept. In this case, the task is to write code for a function that checks if there are any two numbers in a given list that are closer to each other than a specified threshold. This requires the application of programming concepts and skills to solve a specific problem.\n\nThe function takes a list of numbers and a threshold value as input, and it returns a boolean value indicating whether there are any two numbers in the list that are closer than the threshold. This involves applying the necessary logic and programming constructs to implement the desired functionality.\n\nTherefore, the given problem can be classified under the \"Apply\" category of Bloom's taxonomy as it involves using the programming knowledge and skills to solve a new problem.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\nClassification:\n"], ["The given problem can be classified under the \"Apply\" category of Bloom's Taxonomy.\n\nExplanation:\n\nIn the \"Apply\" category, the focus is on using the information or concepts in new situations or for problem-solving. The provided problem requires the implementation of a function to separate groups of nested parentheses from a given string, which involves applying the understanding of balanced parentheses and manipulation of the input string to produce the desired output.\n\nThe key aspects that classify this problem as \"Apply\" are:\n\n1. Utilizing the knowledge of balanced parentheses to identify and separate the groups.\n2. Implementing the logic to extract the separate groups from the input string.\n3. Demonstrating the ability to use the provided information (the problem statement and examples) to solve the problem.\n\nThe problem does not simply require recalling or explaining the concepts (which would fall under \"Remember\" or \"Understand\" categories), nor does it involve making judgments or creating new solutions from scratch (which would be considered \"Evaluate\" or \"Create\" categories). Instead, it focuses on applying the understanding to solve a specific problem, which aligns with the \"Apply\" category of Bloom's Taxonomy.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\nClassification:\n"], ["The given task of writing code for the `truncate_number` function can be classified under the \"Apply\" category of Bloom's Taxonomy.\n\nThe \"Apply\" category involves using information in new situations or applying knowledge, concepts, and skills to solve problems. In this case, the problem requires the programmer to take a given floating-point number, decompose it into its integer and decimal parts, and then return the decimal part.\n\nTo solve this problem, the programmer needs to understand the concept of decomposing a floating-point number into its integer and decimal parts, and then implement the appropriate code to achieve the desired result. This requires the application of programming knowledge and skills to a new situation, which aligns with the \"Apply\" category of Bloom's Taxonomy.\n\nThe example provided in the problem statement also supports the classification under the \"Apply\" category, as it demonstrates the expected output for a specific input, which the programmer needs to implement in the code.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\nClassification:\n"], ["The given task of writing code for the `below_zero` function can be classified under the \"Apply\" category of Bloom's taxonomy.\n\nExplanation:\n\nThe \"Apply\" category in Bloom's taxonomy involves using information in new situations, such as executing, implementing, solving, demonstrating, interpreting, or operating. In this case, the task requires the learner to take the given problem description and implement a solution by writing code to detect if the balance of the bank account falls below zero at any point.\n\nThe problem statement provides the necessary information and requirements, and the learner needs to apply their programming knowledge and skills to create a working solution. This involves understanding the problem, planning the algorithm, and then implementing the solution in code.\n\nThe provided examples also help the learner understand the expected input and output, which they need to apply when writing the function.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\nClassification:\n"], ["The given problem can be classified into the \"Apply\" category of Bloom's taxonomy.\n\nThe task is to write code for the function `mean_absolute_deviation`, which requires the application of the formula for calculating the Mean Absolute Deviation (MAD) of a given list of numbers. This involves using the provided information (the formula for MAD) and implementing it in code to solve the problem.\n\nThe \"Apply\" category in Bloom's taxonomy refers to the ability to use information in new situations, which is exactly what is required in this problem. The programmer needs to take the conceptual understanding of the MAD formula and apply it to the specific task of writing a function to calculate the MAD for a given list of numbers.\n\nOther categories in Bloom's taxonomy, such as \"Remember\" (recalling facts and basic concepts) or \"Understand\" (explaining ideas or concepts), would not be the most appropriate classification for this problem, as it goes beyond simply recalling or explaining the MAD formula and requires the active application of that knowledge to solve a specific problem.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\nClassification:\n"], ["The given problem of writing code for the `intersperse` function can be classified under the \"Apply\" category of Bloom's taxonomy.\n\nExplanation:\n\nThe \"Apply\" category in Bloom's taxonomy involves using information in new situations, such as executing, implementing, solving, demonstrating, or interpreting a problem. In this case, the task requires the learner to take the provided problem statement and function signature, and then write the code to implement the desired functionality.\n\nThe problem does not simply require recalling or explaining a concept (Remember or Understand categories), but rather applying the programming knowledge and skills to create a new implementation. Similarly, it does not involve analyzing the problem in depth or evaluating the solution (Analyze or Evaluate categories). The primary task is to write the code to solve the given problem, which aligns with the \"Apply\" category.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\nClassification:\n"], ["The given problem can be classified into the \"Apply\" category of Bloom's taxonomy.\n\nIn the \"Apply\" category, the task is to use the given information (the problem statement and the function signature) to solve a new problem by implementing the required functionality.\n\nThe problem requires the learner to write code for the `parse_nested_parens` function, which takes a string of nested parentheses and returns a list of integers representing the deepest level of nesting for each group. This involves applying the understanding of nested parentheses and using programming concepts to implement the solution.\n\nThe \"Apply\" category is appropriate because the learner needs to demonstrate their ability to use the given information to solve a specific problem, rather than just recalling or explaining concepts (which would fall under the \"Remember\" or \"Understand\" categories, respectively).\n\nThe key verbs associated with the \"Apply\" category, such as \"execute\", \"implement\", \"solve\", and \"use\", are relevant to the task of writing code to solve the given problem.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\nClassification:\n"], ["The given task of writing code for the `filter_by_substring` function falls under the \"Apply\" category of Bloom's taxonomy.\n\nThe \"Apply\" category involves using information in new situations. In this case, the task requires the implementation of a function that filters a list of strings based on a given substring, which involves applying the knowledge of programming concepts and techniques to solve a specific problem.\n\nThe key reasons why this task is classified as \"Apply\" are:\n\n1. The problem statement provides a clear description of the task, and the expected input and output are defined, which allows the person to apply their programming knowledge to implement the solution.\n2. The function definition and the docstring provide the necessary information to understand the problem and implement the solution, which aligns with the \"Apply\" category of Bloom's taxonomy.\n3. The examples given in the docstring further clarify the expected behavior of the function, which helps in applying the knowledge to solve the problem.\n\nTherefore, the classification of this task is \"Apply\" in Bloom's taxonomy.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\nClassification:\n"], ["The given problem can be classified as **Apply** in Bloom's taxonomy.\n\nThe reason is that the task requires the learner to use the knowledge of programming and the concepts of Python functions, lists, and tuples to implement a specific solution to the problem. The learner needs to take the given information (the problem statement) and apply their programming skills to write the code for the `sum_product` function, which computes the sum and product of the elements in a list of integers.\n\nThe problem does not merely require recalling facts or concepts (Remember), understanding the problem (Understand), analyzing the problem (Analyze), or creating a novel solution (Create). Instead, it asks the learner to apply their programming knowledge and skills to solve the given problem, which is the essence of the \"Apply\" level in Bloom's taxonomy.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\nClassification:\n"], ["The given task of writing code for the `rolling_max` function can be classified into the 'Apply' category of Bloom's taxonomy.\n\nThe 'Apply' category in Bloom's taxonomy involves using information in new situations, such as executing, implementing, solving, or demonstrating a concept. In this case, the problem requires the learner to use their understanding of concepts like iterating through a list, maintaining a running maximum, and generating a new list based on the rolling maximum. This involves applying the knowledge and skills acquired to solve a specific problem, which aligns with the 'Apply' category.\n\nThe learner needs to take the problem description and the example provided, and then implement the logic to solve the problem. This requires the learner to apply their programming skills and understanding of data structures and algorithms to write the necessary code.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\nClassification:\n"], ["The given problem can be classified into the following categories of Bloom's taxonomy:\n\n1. **is_palindrome(string: str) -> bool:**\n   - **Category:** Apply\n   - **Explanation:** The `is_palindrome` function takes a string as input and checks if it is a palindrome. This task involves using the provided information (the string) in a new situation (checking if it is a palindrome) and demonstrating the solution (returning a boolean value).\n\n2. **make_palindrome(string: str) -> str:**\n   - **Category:** Create\n   - **Explanation:** The `make_palindrome` function takes a string as input and produces a new string that is the shortest palindrome that begins with the supplied string. This task requires generating a new or original solution by combining the given information (the input string) and applying an algorithm to create the desired output (the shortest palindrome).\n\nThe classification is as follows:\n\n- `is_palindrome(string: str) -> bool:` Apply\n- `make_palindrome(string: str) -> str:` Create", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\nClassification:\n"], ["The given task of writing code for the `string_xor` function can be classified under the \"Apply\" category of Bloom's taxonomy.\n\nThe \"Apply\" category involves using information in new situations. In this case, the task requires the user to take the provided problem statement and input/output examples, and then implement the logic to perform the binary XOR operation on the input strings and return the result.\n\nThe problem does not involve simply recalling or recognizing facts (which would be in the \"Remember\" or \"Understand\" categories), nor does it involve analyzing connections or making judgements (which would be in the \"Analyze\" or \"Evaluate\" categories). The primary focus is on applying the knowledge of binary XOR operations to solve the given problem, which aligns with the \"Apply\" category.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\nClassification:\n"], ["The given problem can be classified into the \"Apply\" category of Bloom's taxonomy.\n\nReasoning:\n\nThe problem requires the user to write code for the `longest` function, which takes a list of strings as input and returns the longest string from the list. If the list is empty, it should return `None`. This task involves applying the knowledge of programming concepts, such as iterating through a list, comparing the lengths of strings, and returning the appropriate result.\n\nThe \"Apply\" category in Bloom's taxonomy focuses on the ability to use information in new situations. In this case, the user needs to take the problem statement and the required behavior, and implement a solution using programming constructs. This process of applying the programming knowledge to a new problem falls under the \"Apply\" category.\n\nThe other categories in Bloom's taxonomy are:\n\n1. Remember: This would involve simply recalling the definition of a function or the behavior of built-in data structures, but not implementing a solution.\n2. Understand: This would involve explaining the problem statement and the expected behavior, but not necessarily writing the code.\n3. Analyze: This would involve breaking down the problem into smaller components and understanding the relationships between them, but not necessarily implementing a solution.\n4. Evaluate: This would involve assessing the correctness or efficiency of the solution, but not necessarily writing the code.\n5. Create: This would involve designing a new algorithm or data structure to solve the problem, which is beyond the scope of this specific task.\n\nTherefore, the given problem can be classified into the \"Apply\" category of Bloom's taxonomy.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\nClassification:\n"], ["The given problem of writing code for the `greatest_common_divisor` function can be classified under the \"Apply\" category of Bloom's taxonomy.\n\nThe \"Apply\" category involves using information in new situations, such as executing, implementing, or demonstrating a solution to a problem. In this case, the problem requires the implementation of an algorithm to find the greatest common divisor of two integers, which involves applying the knowledge of mathematical concepts and programming techniques to solve a specific problem.\n\nThe provided function signature and docstring already give the necessary information about the problem, and the task is to write the code that implements the desired functionality. This type of problem involves applying the learner's understanding of programming concepts, algorithms, and problem-solving skills to produce a working solution.\n\nTherefore, the classification of the given problem is \"Apply\" in Bloom's taxonomy.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\nClassification:\n"], ["The given problem can be classified as \"Apply\" in Bloom's taxonomy.\n\nThe task requires the learner to use the information (the problem statement and the expected behavior) to write code for the given function. This involves applying the programming concepts and skills to solve a new problem situation, which aligns with the \"Apply\" level of Bloom's taxonomy.\n\nThe \"Apply\" level involves using knowledge, concepts, and skills to solve problems in new situations. In this case, the learner needs to take the problem statement, understand the expected behavior, and then write the code to implement the `all_prefixes` function, which is a new problem that they have not encountered before.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\nClassification:\n"], ["The given problem can be classified under the \"Apply\" category of Bloom's taxonomy.\n\nThe reason for this classification is that the task involves using the information (the problem statement and the expected input/output) to write a function that implements the desired behavior. The function `string_sequence(n: int) -> str` needs to be implemented using the given problem description, which requires the application of programming concepts and skills to produce the required output.\n\nThe \"Apply\" category in Bloom's taxonomy refers to the ability to use knowledge, concepts, and skills in new situations or to solve problems. In this case, the problem requires the programmer to apply their understanding of Python syntax, string manipulation, and control flow to write a function that generates the desired string output.\n\nThe examples provided for the \"Apply\" category, such as \"execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch,\" are relevant to this problem, as the task involves implementing a solution and using the necessary programming concepts to produce the expected output.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\nClassification:\n"], ["The given problem, \"Write code for the following function: `def count_distinct_characters(string: str) -> int:`\", can be classified into the \"Apply\" category of Bloom's taxonomy.\n\nExplanation:\n\nThe \"Apply\" category in Bloom's taxonomy involves using information in new situations. In this case, the problem requires the user to implement the `count_distinct_characters` function, which involves applying the knowledge of programming concepts and data structures to solve a specific problem. The user needs to understand the problem statement, determine the appropriate approach to solve it, and then implement the solution by writing the necessary code.\n\nThe problem does not simply require recalling or explaining concepts (which would fall under the \"Remember\" or \"Understand\" categories), nor does it involve analyzing or evaluating the solution (which would be in the \"Analyze\" or \"Evaluate\" categories). Instead, the focus is on applying the acquired programming knowledge to create a working solution, which aligns with the \"Apply\" category of Bloom's taxonomy.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\nClassification:\n"], ["Based on the problem description and the requirements, the classification of this task into Bloom's taxonomy would be:\n\nApply\n\nExplanation:\nThe problem requires the implementation of a function that takes a specific input (a string representing musical notes) and produces the desired output (a list of integers representing the duration of each note). This task involves applying the knowledge of parsing the input string and transforming it into the required output format. It requires the use of programming concepts and techniques to execute the task, which aligns with the \"Apply\" level of Bloom's taxonomy.\n\nThe \"Apply\" level in Bloom's taxonomy involves using information in new situations, demonstrating, interpreting, and applying knowledge to solve problems. In this case, the task requires the learner to take the given instructions and implement a solution in the form of a Python function, which demonstrates the application of programming skills and knowledge.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\nClassification:\n"], ["The given problem of writing code for the `how_many_times` function can be classified under the \"Apply\" category of Bloom's taxonomy.\n\nThe \"Apply\" category involves using information in new situations, such as executing, implementing, solving, and demonstrating a particular concept or skill. In this case, the problem requires the programmer to take the given problem statement, understand the requirements, and then write the necessary code to implement the desired functionality.\n\nThe key aspects that lead to this classification are:\n\n1. The problem statement provides a clear description of what the function should do, and the programmer needs to understand and interpret this information to write the code.\n2. The programmer needs to apply their knowledge of string manipulation, looping, and counting to solve the problem.\n3. The problem asks the programmer to write the actual code, which involves the \"use\" and \"demonstrate\" aspects of the \"Apply\" category.\n\nThe other categories in Bloom's taxonomy do not fit as well, as the problem is not solely focused on recalling facts (Remember), explaining concepts (Understand), analyzing connections (Analyze), or creating a new or original work (Create). The problem is primarily about applying the programmer's knowledge and skills to solve a specific task.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\n\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\nClassification:\n"], ["The given problem can be classified under the \"Apply\" category of Bloom's taxonomy.\n\nIn this problem, the task is to write code for the `sort_numbers` function, which takes a space-delimited string of numerals from 'zero' to 'nine' as input and returns the string with the numbers sorted from smallest to largest.\n\nThe \"Apply\" category in Bloom's taxonomy involves using information in new situations, such as demonstrating, interpreting, or operating. In this case, the problem requires the learner to take the given instructions and implement them by writing a function that sorts the input numbers, which involves applying the knowledge of sorting algorithms or techniques to a new problem.\n\nThe problem does not simply require recalling or explaining the concepts (which would fall under the \"Remember\" or \"Understand\" categories), nor does it involve analyzing the connections between ideas or evaluating the solution (which would fall under the \"Analyze\" or \"Evaluate\" categories). Instead, the focus is on applying the relevant knowledge and skills to produce a working solution, which aligns with the \"Apply\" category of Bloom's taxonomy.", "Your task is to classify tasks into Bloom's taxonomy. The classes and their description are provided below:\nRemember: Recall facts and basic concepts.\n[Examples]: define, duplicate, list, memorize, repeat, state\n\nUnderstand: Explain ideas or concepts.\n[Examples]: classify, describe, discuss, explain, identify, locate, recognize, report, select, translate\n\nApply: Use information in new situations.\n[Examples]: execute, implement, solve, use, demonstrate, interpret, operate, schedule, sketch\n\nAnalyze: Draw connections among ideas.\n[Examples]: differentiate, organize, relate, compare, contrast, distinguish, examine, experiment, question, test\n\nEvaluate: Justify a stand or decision.\n[Examples]: appraise, argue, defend, judge, select, support, value, critique, weigh\n\nCreate: Produce new or original work.\n[Examples]: design, assemble, construct, conjecture, develop, formulate, author, investigate\nClassify the following problem into the corresponding category of Bloom's taxonomy:\nWrite code for the following function:\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\nClassification:\n"]]